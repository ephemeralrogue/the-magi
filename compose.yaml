name: The Magi

services:
  ritsuko:
    image: docker.elastic.co/elasticsearch/elasticsearch-wolfi:${STACK_VERSION}
    container_name: ritsuko
    volumes:
      # KICS-scan ignore-block
      - type: volume
        source: ritsuko_vol
        target: /usr/share/elasticsearch/config/certs
        volume:
          nocopy: false
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: melchior\n"\
          "    dns:\n"\
          "      - melchior\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: caspar\n"\
          "    dns:\n"\
          "      - caspar\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: balthasar\n"\
          "    dns:\n"\
          "      - balthasar\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://melchior:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://melchior:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/melchior/melchior.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    user: "0"
    # KICS-scan ignore-block
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETFCAP
      - SETGID
      - SETUID
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: ${ES_MEM_LIMIT}
          cpus: ${ES_CPU_LIMIT}
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true

  melchior:
    image: docker.elastic.co/elasticsearch/elasticsearch-wolfi:${STACK_VERSION}
    container_name: melchior
    depends_on:
      ritsuko:
        condition: service_healthy
    # KICS-scan ignore-block
    volumes:
      - type: volume
        source: melchior_vol
        target: /usr/share/elasticsearch/data
      - type: volume
        source: ritsuko_vol
        target: /usr/share/elasticsearch/config/certs
        volume:
          nocopy: true
    environment:
      - node.name=melchior
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=melchior,caspar,balthasar
      - discovery.seed_hosts=caspar,balthasar
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/melchior/melchior.key
      - xpack.security.http.ssl.certificate=certs/melchior/melchior.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/melchior/melchior.key
      - xpack.security.transport.ssl.certificate=certs/melchior/melchior.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    ports:
      - '127.0.0.1:${ES_PORT}:${ES_PORT}'
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    labels:
      co.elastic.logs/module: elasticsearch
      co.elastic.metrics/module: elasticsearch
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: ${ES_MEM_LIMIT}
          cpus: ${ES_CPU_LIMIT}
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true
    ulimits:
      memlock:
        soft: -1
        hard: -1
  
  caspar:
    image: docker.elastic.co/elasticsearch/elasticsearch-wolfi:${STACK_VERSION}
    container_name: caspar
    depends_on:
      melchior:
        condition: service_started
    volumes:
      - type: volume
        source: caspar_vol
        target: /usr/share/elasticsearch/data
      # KICS-scan ignore-block
      - type: volume
        source: ritsuko_vol
        target: /usr/share/elasticsearch/config/certs
        volume:
          nocopy: true
    environment:
      - node.name=caspar
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=melchior,caspar,balthasar
      - discovery.seed_hosts=melchior,balthasar
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/caspar/caspar.key
      - xpack.security.http.ssl.certificate=certs/caspar/caspar.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/caspar/caspar.key
      - xpack.security.transport.ssl.certificate=certs/caspar/caspar.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    labels:
      co.elastic.logs/module: elasticsearch
      co.elastic.metrics/module: elasticsearch
    cap_drop:
     - ALL
    deploy:
      resources:
        limits:
          memory: ${ES_MEM_LIMIT}
          cpus: ${ES_CPU_LIMIT}
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true
    ulimits:
      memlock:
        soft: -1
        hard: -1

  balthasar:
    image: docker.elastic.co/elasticsearch/elasticsearch-wolfi:${STACK_VERSION}
    container_name: balthasar
    depends_on:
      melchior:
        condition: service_started
      caspar:
        condition: service_started
    volumes:
      # KICS-scan ignore-block
      - type: volume
        source: balthasar_vol
        target: /usr/share/elasticsearch/data
      # KICS-scan ignore-block
      - type: volume
        source: ritsuko_vol
        target: /usr/share/elasticsearch/config/certs
        volume:
          nocopy: true
    environment:
      - node.name=balthasar
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=melchior,caspar,balthasar
      - discovery.seed_hosts=melchior,caspar
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/balthasar/balthasar.key
      - xpack.security.http.ssl.certificate=certs/balthasar/balthasar.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/balthasar/balthasar.key
      - xpack.security.transport.ssl.certificate=certs/balthasar/balthasar.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    labels:
      co.elastic.logs/module: elasticsearch
      co.elastic.metrics/module: elasticsearch
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: ${ES_MEM_LIMIT}
          cpus: ${ES_CPU_LIMIT}
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    depends_on:
      melchior:
        condition: service_healthy
      caspar:
        condition: service_healthy
      balthasar:
        condition: service_healthy
    volumes:
      - type: volume
        source: kibanadata
        target: /usr/share/kibana/data
      # KICS-scan ignore-block
      - type: volume
        source: ritsuko_vol
        target: /usr/share/kibana/config/certs
        volume:
          nocopy: true
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://melchior:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    ports:
      - '127.0.0.1:${KIBANA_PORT}:${KIBANA_PORT}'
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    labels:
      co.elastic.logs/module: kibana
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: ${KB_MEM_LIMIT}
          cpus: ${KB_CPU_LIMIT}
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true

  metricbeat:
    build:
      dockerfile: ./Dockerfile.metricbeat
    container_name: metricbeat
    depends_on:
      melchior:
        condition: service_healthy
      caspar:
        condition: service_healthy
      balthasar:
        condition: service_healthy
      kibana:
        condition: service_healthy
    volumes:
      - type: volume
        source: metricbeatdata
        target: /usr/share/metricbeat/data
      # KICS-scan ignore-block
      - type: volume
        source: ritsuko_vol
        target: /usr/share/metricbeat/certs
        volume:
          nocopy: true
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://melchior:9200
      - KIBANA_HOSTS=http://kibana:5601
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:9200 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    user: root
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: ${LS_MEM_LIMIT}
          cpus: ${LS_CPU_LIMIT}
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true

  fluent-bit:
    image: cr.fluentbit.io/fluent/fluent-bit:3.2.6
    container_name: fluent-bit
    depends_on:
      melchior:
        condition: service_healthy
      caspar:
        condition: service_healthy
      balthasar:
        condition: service_healthy
      kibana:
        condition: service_healthy
    volumes:
      - type: bind
        source: ./fluent-bit.yaml
        target: /fluent-bit/etc/fluent-bit.yaml
      # KICS-scan ignore-block
      - type: volume
        source: ritsuko_vol
        target: /usr/share/fluent-bit/certs
        volume:
          nocopy: true
      - type: volume
        source: fluentbitdata
        target: /usr/share/fluent-bit/data
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=127.0.0.1
      - ELASTIC_PORT=${ES_PORT}
      - KIBANA_HOSTS=http://kibana:5601
    ports:
      - '127.0.0.1:24224:24224'
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:24224 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: ${LS_MEM_LIMIT}
          cpus: ${LS_CPU_LIMIT}
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true

networks:
  default:
    name: ${NETWORK_NAME}
    external: false

volumes:
  ritsuko_vol:
    driver: local
  melchior_vol:
    driver: local
  caspar_vol:
    driver: local
  balthasar_vol:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata:
    driver: local
  fluentbitdata:
    driver: local